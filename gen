#!/usr/bin/env perl

use strict;
use warnings;
use File::Slurp qw<slurp>;
use open qw<:std IO :encoding(UTF-8)>;

$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0;

my @articles = grep { -f $_ } glob('articles/*.md');
my (@titles, @dates, %tags, @links, %files);

%files = map { $_ => 0 } grep { -f $_ } glob('./docs/*.html'),
         map { $_ => 0 } grep { -f $_ } glob('./docs/articles/*.html'),
         map { $_ => 0 } grep { -f $_ } glob('./docs/tags/*.html');

sub article_tmpl { my $s = slurp('templ-article.html', binmode => 'utf8');       $s; }
sub index_tmpl   { my $s = slurp('templ-index.html', binmode => 'utf8');         $s; }
sub tags_tmpl    { my $s = slurp('templ-tags.html', binmode => 'utf8');          $s; }
sub index_cnt    { my $s = slurp('templ-index.content.html', binmode => 'utf8'); $s; }
sub render {
  my ($data) = @_;
  open my $fh, '>', '/tmp/dbks.md' or die $!;
  binmode $fh, ':utf8';
  print {$fh} $data;
  close $fh;

  qx`pandoc '/tmp/dbks.md' -o '/tmp/dbks.html' -t html -f markdown_mmd-tex_math_dollars`;
  my $in = slurp('/tmp/dbks.html', binmode => 'utf8');
  $in;
}
sub spurt {
  my ($fn, $data) = @_;

  if ($fn =~ m{\.html$}) {
    $files{$fn}++;
  }

  open my $fh, '>', $fn or die $!;
  binmode $fh, ':utf8';
  print $fh $data;
  close $fh;
}

my $regen = ($ARGV[0]//'') =~ m{^-f|--force$} ? 1 : 0;

# article gen
foreach my $article (reverse sort @articles) {
  my ($title, $slug, $tagstr, $data, $newfn, $templ, $date, $html, @linktags) = ((split "\n", slurp($article, binmode => 'utf8'), 4), $article, article_tmpl);
  $newfn =~ s/\.md$/.html/g;
  $date  = substr $article, 9, 8;
  $date  = join('-', substr($date, 0, 4), substr($date, 4, 2), substr($date, 6, 2));

  push @links,  $newfn;
  push @dates,  $date;
  push @titles, $title;
  
  foreach my $tag (split ',', $tagstr) {
    $tag =~ s/^\s*|\s*$//g;
    next if $tag eq '';
    push $tags{$tag}->{links}->@*, $newfn;
    push $tags{$tag}->{dates}->@*, $date;
    push $tags{$tag}->{titles}->@*, $title;
    push @linktags, '<a href="/tags/'.$tag.'.html">'.$tag.'</a>';
  }

  if (-f "docs/$newfn" && !$regen) {
    printf "skipping: docs/%s\n", $newfn;
    $files{"./docs/$newfn"}++;
    next;
  }

  $html = render $data;

  my $lt = join(', ', @linktags);
  $templ =~ s/\{\{date\}\}/$date/g;
  $templ =~ s/\{\{slug\}\}/$slug/g;
  $templ =~ s/\{\{link\}\}/$newfn/g;
  $templ =~ s/\{\{title\}\}/$title/g;
  $templ =~ s/\{\{tags\}\}/$tagstr/g;
  $templ =~ s/\{\{content\}\}/$html/g;
  $templ =~ s/\{\{taglinks\}\}/$lt/g;

  printf "docs/articles/%s, slug:%s,tag=%s,len=%d\n", $newfn, $slug, $tagstr, length($templ);
  spurt "./docs/$newfn", $templ;
}

# index gen
my $index   = index_tmpl;
my $content = '';
for my $idx (0..@titles - 1) {
  my $templ = index_cnt;
  $templ   =~ s/\{\{link\}\}/$links[$idx]/g;
  $templ   =~ s/\{\{date\}\}/$dates[$idx]/g;
  $templ   =~ s/\{\{title\}\}/$titles[$idx]/g;
  $content .= "\n" . $templ;
}
$index =~ s/\{\{content\}\}/$content/g;
spurt "./docs/index.html", $index;

# tag gen
foreach my $tag (sort keys %tags) {
  my $templ   = tags_tmpl;
  my $content = '';

  foreach my $idx (0..$tags{$tag}->{links}->@* - 1) {
    my $templ_row = index_cnt;
    $templ_row   =~ s/\{\{link\}\}/$tags{$tag}->{links}->[$idx]/g;
    $templ_row   =~ s/\{\{date\}\}/$tags{$tag}->{dates}->[$idx]/g;
    $templ_row   =~ s/\{\{title\}\}/$tags{$tag}->{titles}->[$idx]/g;
    $content     .= "\n" . $templ_row;
  }
  $templ =~ s/\{\{content\}\}/$content/g;
  $templ =~ s/\{\{tag\}\}/$tag/g;
  spurt "./docs/tags/$tag.html", $templ;
}

# sitemap
sub rglob {
  my ($dir) = @_;
  glob("$dir/*"), map { rglob($_); } grep { -d $_ && $_ ne '.' && $_ ne '..' && $_ ne $dir } glob("$dir/*"); 
}
my @docs = grep { -f $_ && $_ =~ m{\.html$} } rglob('docs');
spurt "./docs/sitemap.txt", join("\n", @docs);

printf "WARNING: unused files:\n%s\n", join("\n", grep { $_ !~ m/^\.\/docs\/\d+\.html$/ && $files{$_} == 0 } sort keys %files) if grep { $_ !~ m/^\.\/docs\/\d+\.html$/ && $files{$_} == 0 } keys %files;
